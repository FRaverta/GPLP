
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 10 16:50:22 ART 2016
//----------------------------------------------------

package main.lpModel.dtNet.dtnParser;

import java_cup.runtime.*;
import main.lpModel.dtNet.DTNetwork;

import java.io.FileReader;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 10 16:50:22 ART 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\007\002\000\002\002" +
    "\010\000\002\003\003\000\002\003\004\000\002\004\006" +
    "\000\002\005\004\000\002\005\003\000\002\006\003\000" +
    "\002\006\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\004\004\004\001\002\000\004\013\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\000\001\002\000\004\005\011\001\002\000" +
    "\004\013\012\001\002\000\004\013\015\001\002\000\004" +
    "\002\uffff\001\002\000\006\002\ufffe\013\015\001\002\000" +
    "\004\010\016\001\002\000\004\013\021\001\002\000\004" +
    "\011\026\001\002\000\006\011\ufffa\013\021\001\002\000" +
    "\010\006\022\011\ufff9\013\ufff9\001\002\000\004\013\023" +
    "\001\002\000\004\007\024\001\002\000\006\011\ufff8\013" +
    "\ufff8\001\002\000\004\011\ufffb\001\002\000\006\002\ufffc" +
    "\013\ufffc\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\012\004" +
    "\013\001\001\000\002\001\001\000\006\003\026\004\013" +
    "\001\001\000\002\001\001\000\006\005\016\006\017\001" +
    "\001\000\002\001\001\000\006\005\024\006\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
               
             //We Can't use this block for parser variables inicialization, we should do this in a extra-rule called "begin"
          
    }

    
	
	public static DTNetwork parseFromFile(String path) throws Exception{
        parser a = new parser(new DTNFormatLexer( new FileReader(path)));
		return  (DTNetwork) a.parse().value;		
	}
	
    //Method for report sintax error and information about this
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.out.println(m + "  " + info.toString());
        System.exit(1); //Interrumpo la ejecucion
    }
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


//Global variables   
	Integer AMOUNT_OF_NODES;
	
	private void setAmountOfNodes(Integer n){
		AMOUNT_OF_NODES = n;
	}

//Method for report error and information about this
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");


        m.append(" : "+message);
        System.out.println(m + " " + info.toString());
        System.exit(1); //Interrumpo la ejecucion
    }





  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FIELD ::= INT LBRACKET INT RBRACKET 
            {
              Field RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Field(i,w); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIELD",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FIELD ::= INT 
            {
              Field RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Field(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIELD",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATE_DECL ::= FIELD 
            {
              List<Field> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Field>(); RESULT.add(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATE_DECL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATE_DECL ::= FIELD STATE_DECL 
            {
              List<Field> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Field> decls = (List<Field>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Field>(decls); RESULT.add(0,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATE_DECL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATE ::= INT LBRACE STATE_DECL RBRACE 
            {
              State RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Field> decls = (List<Field>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new State(AMOUNT_OF_NODES,d, decls);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FSM ::= STATE FSM 
            {
              List<State> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		State s = (State)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statesListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statesListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<State> statesList = (List<State>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<State>(statesList); RESULT.add(0,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FSM",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FSM ::= STATE 
            {
              List<State> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		State s = (State)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<State>(); RESULT.add(0,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FSM",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DTNFORMAT ::= NODES INT NT$0 INTERVALS INT FSM 
            {
              DTNetwork RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (DTNetwork) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer nodes = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int intervalsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int intervalsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer intervals = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<State> states = (List<State>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DTNetwork(nodes, intervals, states);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DTNFORMAT",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              DTNetwork RESULT =null;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer nodes = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 setAmountOfNodes(nodes); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= DTNFORMAT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DTNetwork start_val = (DTNetwork)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

